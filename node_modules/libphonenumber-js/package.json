{
  "_args": [
    [
      {
        "raw": "libphonenumber-js@^0.4.5",
        "scope": null,
        "escapedName": "libphonenumber-js",
        "name": "libphonenumber-js",
        "rawSpec": "^0.4.5",
        "spec": ">=0.4.5 <0.5.0",
        "type": "range"
      },
      "D:\\erget\\node_modules\\ng2-validation"
    ]
  ],
  "_from": "libphonenumber-js@>=0.4.5 <0.5.0",
  "_id": "libphonenumber-js@0.4.52",
  "_inCache": true,
  "_location": "/libphonenumber-js",
  "_nodeVersion": "9.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/libphonenumber-js-0.4.52.tgz_1516530003493_0.4600037990603596"
  },
  "_npmUser": {
    "name": "catamphetamine",
    "email": "purecatamphetamine@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "libphonenumber-js@^0.4.5",
    "scope": null,
    "escapedName": "libphonenumber-js",
    "name": "libphonenumber-js",
    "rawSpec": "^0.4.5",
    "spec": ">=0.4.5 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ng2-validation"
  ],
  "_resolved": "http://registry.npmjs.org/libphonenumber-js/-/libphonenumber-js-0.4.52.tgz",
  "_shasum": "19aec62488f039faee243df14d68ae56d77780a6",
  "_shrinkwrap": null,
  "_spec": "libphonenumber-js@^0.4.5",
  "_where": "D:\\erget\\node_modules\\ng2-validation",
  "author": {
    "name": "catamphetamine",
    "email": "purecatamphetamine@gmail.com"
  },
  "betterScripts": {
    "browser-build": {
      "command": "npm run build-es6-modules && webpack --progress --colors",
      "env": {
        "WEBPACK_ENV": "build"
      }
    },
    "build-commonjs-modules": {
      "command": "babel ./source --out-dir ./build --source-maps",
      "env": {
        "BABEL_ENV": "commonjs"
      }
    },
    "build-es6-modules": {
      "command": "babel ./source --out-dir ./es6 --source-maps",
      "env": {
        "BABEL_ENV": "es6"
      }
    }
  },
  "bin": {
    "libphonenumber-generate-metadata": "./bin/update-metadata.js"
  },
  "bugs": {
    "url": "https://github.com/catamphetamine/libphonenumber-js/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.6.1",
    "bluebird": "^3.4.6",
    "minimist": "^1.2.0",
    "xml2js": "^0.4.17"
  },
  "description": "A simpler (and smaller) rewrite of Google Android's popular libphonenumber library",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.21.0",
    "babel-loader": "^6.2.10",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-stage-2": "^6.18.0",
    "better-npm-run": "0.0.14",
    "chai": "^3.5.0",
    "crlf": "^1.1.1",
    "istanbul": "^1.1.0-alpha.1",
    "json-loader": "^0.5.4",
    "mocha": "^2.4.5",
    "npm-run-all": "^1.4.0",
    "rimraf": "^2.5.0",
    "webpack": "^2.2.0-rc.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Ns5FcEp8W/lZd+lKu7OB46RYBKcncN/S3C51OFh7qXbu6kOFAd75A4M0jtasK3MUWMxKsKXII4WL+GbqaLa2DQ==",
    "shasum": "19aec62488f039faee243df14d68ae56d77780a6",
    "tarball": "https://registry.npmjs.org/libphonenumber-js/-/libphonenumber-js-0.4.52.tgz"
  },
  "gitHead": "56b87f24e04c8a50d7973b24c629fff2a4f65c09",
  "homepage": "https://github.com/catamphetamine/libphonenumber-js#readme",
  "keywords": [
    "javascript",
    "telephone",
    "phone",
    "number",
    "input",
    "mobile",
    "android",
    "iphone",
    "international",
    "libphonenumber"
  ],
  "license": "MIT",
  "main": "index.common.js",
  "maintainers": [
    {
      "name": "catamphetamine",
      "email": "purecatamphetamine@gmail.com"
    }
  ],
  "module": "index.es6.js",
  "name": "libphonenumber-js",
  "optionalDependencies": {},
  "readme": "# libphonenumber-js\r\n\r\n[![npm version](https://img.shields.io/npm/v/libphonenumber-js.svg?style=flat-square)](https://www.npmjs.com/package/libphonenumber-js)\r\n[![npm downloads](https://img.shields.io/npm/dm/libphonenumber-js.svg?style=flat-square)](https://www.npmjs.com/package/libphonenumber-js)\r\n[![coverage](https://img.shields.io/coveralls/catamphetamine/libphonenumber-js/master.svg?style=flat-square)](https://coveralls.io/r/catamphetamine/libphonenumber-js?branch=master)\r\n\r\nA simpler (and smaller) rewrite of Google Android's famous `libphonenumber` library: easy phone number parsing and formatting in javascript.\r\n\r\n[See Demo](https://catamphetamine.github.io/libphonenumber-js/)\r\n\r\n## LibPhoneNumber\r\n\r\n[`libphonenumber`](https://github.com/googlei18n/libphonenumber) is a phone number formatting and parsing library released by Google, originally developed for (and currently used in) Google's [Android](https://en.wikipedia.org/wiki/Android_(operating_system)) mobile phone operating system. Implementing a rigorous phone number formatting and parsing library was crucial for the phone OS overall usability (back then, in the early 2000s, it was originally meant to be a phone after all, not just a SnapChat device).\r\n\r\n`libphonenumber-js` is a simplified pure javascript port of the original `libphonenumber` library (written in C++ and Java because those are the programming languages used in Android OS). While `libphonenumber` has an [official javascript port](https://github.com/googlei18n/libphonenumber/tree/master/javascript) which is being maintained by Google, it is tightly coupled to Google's `closure` javascript utility framework. It still can be compiled into [one big bundle](http://stackoverflow.com/questions/18678031/how-to-host-the-google-libphonenumber-locally/) which weighs 220 KiloBytes — quite a size for a phone number input component. It [can be reduced](https://github.com/leodido/i18n.phonenumbers.js) to a specific set of countries only but that wouldn't be an option for a worldwide international solution.\r\n\r\nOne part of me was curious about how all this phone matching machinery worked, and another part of me was curious if there's a way to reduce those 220 KiloBytes to something more reasonable while also getting rid of the `closure` library and rewriting it all in pure javascript. So, that was my little hackathon for a couple of weeks, and seems that it succeeded. The resulting library does everything a modern web application needs while maintaining a much smaller size of about 75 KiloBytes.\r\n\r\n## Difference from Google's `libphonenumber`\r\n\r\n  * Pure javascript, doesn't require any 3rd party libraries.\r\n  * Metadata size is just about 75 KiloBytes while the original `libphonenumber` metadata size is about 200 KiloBytes.\r\n  * Doesn't parse alphabetic phone numbers like `1-800-GOT-MILK`.\r\n  * Doesn't parse \"carrier codes\": they're only used in Colombia and Brazil, and only when dialing within those countries from a mobile phone to a fixed line number.\r\n  * Doesn't format special local-only phone numbers: [\"short codes\"](https://support.twilio.com/hc/en-us/articles/223182068-What-is-a-short-code-), emergency telephone numbers like `911`, etc.\r\n  * Doesn't distinguish between pager, voicemail, toll free and other XXth century stuff.\r\n  * Doesn't format phone numbers for \"out of country dialing\", e.g. `011 ...` for calling from inside the US to another country. Just use the standard `+...` international phone numbers.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install libphonenumber-js --save\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nimport { parse, format, AsYouType } from 'libphonenumber-js'\r\n\r\nparse('8 (800) 555 35 35', 'RU')\r\n// { country: 'RU', phone: '8005553535' }\r\n\r\nformat('2133734253', 'US', 'International')\r\n// '+1 213 373 4253'\r\n\r\nnew AsYouType().input('+12133734')\r\n// '+1 213 373 4'\r\nnew AsYouType('US').input('2133734')\r\n// '(213) 373-4'\r\n```\r\n\r\n## Country code definition\r\n\r\n\"Country code\" means either a [two-letter ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (like `US`) or a special `001` country code used for non-geographical entities (as per [Google's libphonenumber library](https://github.com/googlei18n/libphonenumber/blob/0068d861a68d3d4612f7bf8646ab844dd3cefce5/java/libphonenumber/test/com/google/i18n/phonenumbers/RegionCode.java#L23-L24)). For example, `+7 800 555 35 35` phone number belongs to Russia so it has `RU` country code where as `+800 1 1111 1111` phone number could belong to any country so it has `001` country code.\r\n\r\n## API\r\n\r\n### parse(text, [`country: string` or `options: Object`])\r\n\r\nAttempts to parse a valid phone number from `text`.\r\n\r\nAvailable `options`:\r\n\r\n```js\r\n{\r\n  country:\r\n  {\r\n    restrict — The phone number must belong to this country.\r\n\r\n    default — Default country to use if the phone number\r\n              is not written in international format.\r\n  }\r\n}\r\n```\r\n\r\nIf [`country`](https://github.com/catamphetamine/libphonenumber-js#country-code-definition) string is passed then it becomes `options.country.restrict`.\r\n\r\nReturns `{ country, phone, ext }` where\r\n * `country` is a [country code](https://github.com/catamphetamine/libphonenumber-js#country-code-definition)\r\n * `phone` is a national (significant) number\r\n * `ext` is a phone number extension\r\n\r\nIf the phone number supplied isn't valid then an empty object `{}` is returned.\r\n\r\n```js\r\nparse('+1-213-373-4253') === { country: 'US', phone: '2133734253' }\r\nparse('(213) 373-4253', 'US') === { country: 'US', phone: '2133734253' }\r\n\r\n// Parses phone number extensions.\r\nparse('(213) 373-4253 ext. 123', 'US') === { country: 'US', phone: '2133734253', ext: '123' }\r\n\r\n// Parses RFC 3966 phone number URIs.\r\nparse('tel:+78005553535;ext:123') === { country: 'RU', phone: '8005553535', ext: '123' }\r\n```\r\n\r\nSpeaking of phone number extensions, I myself consider them obsolete and I'd just discard the extension part given we're in the XXI-st century. Still, some people [asked](https://github.com/catamphetamine/libphonenumber-js/issues/129) for phone number extensions support so it has been added. But I personally think it's an unnecessary complication.\r\n\r\n### format(parsedNumber, format, [options])\r\n\r\nFormats a `parsedNumber` into a string according to a `format`.\r\n\r\nAvailable `format`s:\r\n  * `National` — e.g. `(213) 373-4253`\r\n  * `International` — e.g. `+1 213 373 4253`\r\n  * [`E.164`](https://en.wikipedia.org/wiki/E.164) — e.g. `+12133734253`\r\n  * [`RFC3966`](https://www.ietf.org/rfc/rfc3966.txt) (the phone number URI) — e.g. `tel:+12133734253;ext=123`\r\n\r\nAvailable `options`:\r\n\r\n```js\r\n{\r\n  formatExtension(number, extension) — Formats `number` and `extension` to a string.\r\n                                       By default returns `${number} ext. ${extension}`.\r\n}\r\n```\r\n\r\n`parsedNumber` argument **must** be an already `parse()`d phone number (to strip national prefix from it). That means that first a phone number is `parse()`d and only then is it `format()`ted and there's no other way around it. For example, a phone number is `parse()`d before storing it in a database and then it is `forrmat()`ted each time it is read from the database. The `parsedNumber` object argument can also be expanded into two string arguments (for those who prefer this kind of syntax):\r\n\r\n```js\r\nformat({ country: 'US', phone: '2133734253' }, 'International') === '+1 213 373 4253'\r\nformat('2133734253', 'US', 'International') === '+1 213 373 4253'\r\n\r\n// The following won't work because the phone number argument is invalid\r\n// (has not been parsed previously and therefore contains the `0` national prefix)\r\nformat('017212345678', 'DE', 'E.164') !== '+4917212345678'\r\n\r\n// Formats phone number extensions (except for E.164).\r\nformat({ country: 'US', phone: '2133734253', ext: '123' }, 'National') ===  '(213) 373-4253 ext. 123'\r\n```\r\n\r\n### getNumberType(parsedNumber)\r\n\r\nDetermines phone number type (fixed line, mobile, toll free, etc). This function will work if `--extended` (or relevant `--types`) metadata is available (see [Metadata](#metadata) section of this document). The regular expressions used to differentiate between various phone number types consume a lot of space (two thirds of the total size of the `--extended` library build) therefore they're not included in the bundle by default.\r\n\r\nThe arguments can be\r\n\r\n * either the result of the `parse()` function call: `{ country, phone }`\r\n * or a pair of arguments `(phone, country_code)` in which case it is passed to the `parse()` function right away and the resulting `{ country, phone }` object is used\r\n\r\n```js\r\ngetNumberType('8005553535', 'RU') === 'MOBILE'\r\n```\r\n\r\n### isValidNumber(parsedNumber)\r\n\r\nChecks if a phone number is valid.\r\n\r\nThe arguments can be\r\n\r\n * either the result of the `parse()` function call: `{ country, phone }`\r\n * or a pair of arguments `(phone, country_code)` in which case it is passed to the `parse()` function right away and the resulting `{ country, phone }` object is used\r\n\r\n```js\r\nisValidNumber('+1-213-373-4253') === true\r\nisValidNumber('+1-213-373') === false\r\n\r\nisValidNumber('(213) 373-4253', 'US') === true\r\nisValidNumber('(213) 37', 'US') === false\r\n\r\nisValidNumber({ phone: '2133734253', country: 'US' }) === true\r\n```\r\n\r\nThe difference between using `parse()` and `isValidNumber()` for phone number validation is that `isValidNumber()` also checks the precise regular expressions of possible phone numbers for a country. For example, for Germany `parse('123456', 'DE')` would return `{ country: 'DE', phone: '123456' }` because this phone number matches the general phone number rules for Germany. But, if the metadata is compiled with `--extended` (or relevant `--types`) flag (see below) and the precise regular expressions for possible phone numbers are included in the metadata then `isValidNumber()` is gonna use those precise regular expressions for validation and `isValid('123456', 'DE')` will return `false` because the phone number `123456` doesn't actually exist in Germany.\r\n\r\nSo, the general phone number rules for a country are mainly for phone number formatting: they dictate how different phone numbers (matching those general regular expressions) should be formatted. And `parse()` uses only those general regular expressions (as per the reference Google's `libphonenumber` implementation) to perform basic phone number validation. `isValidNumber()`, on the other hand, is all about validation, so it digs deeper into precise regular expressions (if they're included in metadata) for possible phone numbers in a given country. And that's the difference between them: `parse()` parses phone numbers and loosely validates them while `isValidNumber()` validates phone number precisely (provided the precise regular expressions are included in metadata).\r\n\r\nBy default those precise regular expressions aren't included in metadata at all because that would cause metadata to grow twice in its size (the complete metadata size is about 130 KiloBytes while the default reduced metadata size is about 70 KiloBytes). If anyone needs to use (or generate) custom metadata then it's very easy to do so: follow the instructions provided in the [Customizing metadata](#customizing-metadata) section of this document.\r\n\r\n#### Using phone number validation feature\r\n\r\nI personally wouldn't rely on Google's phone number validation too much because it might get outdated:\r\n\r\n* First, new phone number rules are added to Google's `libphonenumber` library after they have already been implemented in real life (which introduces a delay).\r\n\r\n* Then those new rules from Google's `libphonenumber` are updated automatically in this library (this scheduled update script introduces a small delay of 1 day, unless it malfunctions).\r\n\r\n* And then there's still the web application itself using this library and until a developer installs `libphonenumber-js@latest` and redeploys the web application it's gonna use the old (outdated) phone number validation rules which could result in losing customers with perfectly valid but brand new phone numbers.\r\n\r\nPhone number validation rules are [constantly changing](https://github.com/googlei18n/libphonenumber/commits/master/resources/PhoneNumberMetadata.xml) for `--extended` rules and are fairly static for \"general\" ones. Still imagine a web application (e.g. a promosite or a \"personal website\") being deployed once and then running for years without any maintenance.\r\n\r\n### `class` AsYouType(default_country_code)\r\n\r\nCreates a formatter for partially entered phone number. The two-letter `default_country_code` is optional and, if specified, is gonna be the default country for the phone number being input (in case it's not an international one). The instance of this class has two methods:\r\n\r\n * `input(text)` — takes any text and appends it to the input; returns the formatted phone number\r\n * `reset()` — resets the input\r\n\r\nThe instance of this class has also these fields:\r\n\r\n<!-- * `valid` — is the phone number being input a valid one already\r\nformatter.valid === true -->\r\n * `country` — a [country code](https://github.com/catamphetamine/libphonenumber-js#country-code-definition) of the country this phone belongs to\r\n * `country_phone_code` — a phone code of the `country`\r\n * `national_number` — national number part (so far)\r\n * `template` — currently used phone number formatting template, where digits (and the plus sign, if present) are denoted by `x`-es\r\n\r\n```js\r\nnew AsYouType().input('+12133734') === '+1 213 373 4'\r\nnew AsYouType('US').input('2133734') === '(213) 373-4'\r\n\r\nconst formatter = new AsYouType()\r\nformatter.input('+1-213-373-4253') === '+1 213 373 4253'\r\nformatter.country === 'US'\r\nformatter.country_phone_code = '1'\r\nformatter.template === 'xx xxx xxx xxxx'\r\n```\r\n\r\n\"As You Type\" formatter was created by Google as part of their Android OS and therefore only works for numerical keyboard input, i.e. it can only accept digits (and a `+` sign in the start of an international number). When used on desktops where a user can input all kinds of punctuation (spaces, dashes, parens, etc) it simply ignores everything except digits. This solution is sufficient for all use cases except for phone number extensions which Google's \"As You Type\" formatter does not support. If your project requires phone number extensions input then use a separate input field for that.\r\n\r\n### getPhoneCode(country_code)\r\n\r\nThere have been requests for a function returning a phone code by country code.\r\n\r\n```js\r\ngetPhoneCode('RU') === '7'\r\ngetPhoneCode('IL') === '972'\r\n```\r\n\r\n## Metadata\r\n\r\nMetadata is generated from Google's original [`PhoneNumberMetadata.xml`](https://github.com/googlei18n/libphonenumber/blob/master/resources/PhoneNumberMetadata.xml) by transforming XML into JSON and removing unnecessary fields.\r\n\r\nCurrently I have a script set up monitoring changes to `PhoneNumberMetadata.xml` in Google's repo and automatically releasing new versions of this library when metadata in Google's repo gets updated. So this library's metadata is supposed to be up-to-date. Still, in case the automatic metadata update script malfunctions some day, anyone can request metadata update via a Pull Request here on GitHub:\r\n\r\n  * Fork this repo\r\n  * `npm install`\r\n  * `npm run metadata:update:branch`\r\n  * Submit a Pull Request to this repo from the `update-metadata` branch of your fork\r\n\r\n`npm run metadata:update:branch` command creates a new `update-metadata` branch, downloads the new [`PhoneNumberMetadata.xml`](https://github.com/googlei18n/libphonenumber/blob/master/resources/PhoneNumberMetadata.xml) into the project folder replacing the old one, generates JSON metadata out of the XML one, checks if the metadata has changed, runs the tests, commits the new metadata and pushes the commit to the remote `update-metadata` branch of your fork.\r\n\r\nAlternatively, a developer may wish to update metadata urgently, without waiting for a pull request approval. In this case just perform the steps described in the [Customizing metadata](#customizing-metadata) section of this document.\r\n\r\n## React\r\n\r\nThere's also a React component utilizing this library: [`react-phone-number-input`](https://github.com/catamphetamine/react-phone-number-input)\r\n\r\n## Examples\r\n\r\nFor those asking for phone number examples for use in `<input placeholder/>`s there's `examples.mobile.json`.\r\n\r\n<!-- ## To do\r\n\r\nEverything's done -->\r\n\r\n## Bug reporting\r\n\r\nWhen reporting an issue one must also provide a link to [Google's `libphonenumber` demo page](https://libphonenumber.appspot.com/) illustrating the expected behaviour. This includes validation, parsing, formatting and \"as you type\" formatting. For example, for an Australian number `438 331 999` Google's demo [outputs four sections](https://libphonenumber.appspot.com/phonenumberparser?number=438331999&country=AU) — \"Parsing Result\", \"Validation Results\", \"Formatting Results\" and \"AsYouTypeFormatter Results\". In a bug report, first describe the observed `libphonenumber-js` demo result and then Google's demo result (with a link to it) which must differ from the observed `libphonenumber-js` demo result. If the observed `libphonenumber-js` demo result is the same as Google's demo result and you don't agree with Google's demo result then create an issue in [Google's repo](https://github.com/googlei18n/libphonenumber).\r\n\r\nPhone number validation bugs should **only** be reported if they appear when using [custom metadata functions](#customizing-metadata) fed with `metadata.full.json` because by default all functions in this library use the reduced metadata set which results in looser validation than the original Google `libphonenumber`'s. The [demo page](https://catamphetamine.github.io/libphonenumber-js/) also uses the reduced metadata set and therefore its validation is also looser than the original Google `libphonenumber`'s.\r\n\r\n## TypeScript\r\n\r\nTypeScript support for this library is entirely community-driven. I myself don't use TypeScript. Send your pull requests.\r\n\r\n## Webpack\r\n\r\nIf you're using Webpack 1 (which you most likely are) then make sure that\r\n\r\n * You have `json-loader` set up for `*.json` files in Webpack configuration (Webpack 2 has `json-loader` set up by default)\r\n * `json-loader` doesn't `exclude` `/node_modules/`\r\n * If you override `resolve.extensions` in Webpack configuration then make sure `.json` extension is present in the list\r\n\r\nWebpack 2 sets up `json-loader` by default so there's no need for any special configuration. So better upgrade to Webpack 2 instead.\r\n\r\n## Standalone\r\n\r\nFor those who aren't using bundlers for some reason there's a way to build a standalone version of the library\r\n\r\n * `git clone https://github.com/catamphetamine/libphonenumber-js.git`\r\n * `npm install`\r\n * `npm run browser-build`\r\n * See the `bundle` folder for `libphonenumber-js.min.js`\r\n\r\n```html\r\n<script src=\"/scripts/libphonenumber-js.min.js\"></script>\r\n<script>\r\n  alert(new libphonenumber.AsYouType('US').input('213-373-4253'))\r\n</script>\r\n```\r\n\r\n## Customizing metadata\r\n\r\nThis library comes prepackaged with three flavours of metadata\r\n\r\n* `metadata.full.json` — contains everything, including all regular expressions for precise phone number validation and getting phone number type, but weighs `130 KiloBytes`.\r\n* `metadata.min.json` — (default) the minimal one, doesn't contain regular expressions for precise phone number validation and getting phone number type, weighs `70 KiloBytes`.\r\n* `metadata.mobile.json` — contains regular expressions for precise **mobile** phone number validation, weighs `100 KiloBytes`.\r\n\r\nFurthermore, if only a specific set of countries is needed in a project, and a developer really wants to reduce the resulting bundle size, say, by 50 KiloBytes (even when including all regular expressions for precise phone number validation and getting phone number type), then he can generate such custom metadata and pass it as an extra argument to this library's functions.\r\n\r\nFirst, add metadata generation script to **your project's** `package.json`\r\n\r\n```js\r\n{\r\n  \"scripts\": {\r\n    \"libphonenumber-metadata\": \"libphonenumber-generate-metadata metadata.min.json --countries RU,DE --extended\",\r\n  }\r\n}\r\n```\r\n\r\nAnd then run it like `npm run libphonenumber-metadata`.\r\n\r\nThe arguments are\r\n\r\n* The first argument is the output metadata file path.\r\n* `--countries` argument is a comma-separated list of the countries included (if `--countries` is omitted then all countries are included).\r\n* `--extended` argument may be passed to include all regular expressions for precise phone number validation and getting phone number type, which increases the precision of phone number validation but at the same time it will enlarge the resulting metadata size approximately twice.\r\n* `--types ...` argument may be passed instead of `--extended` to only include the precise phone number type regular expressions for a specific set of phone number types (a comma-separated list, e.g. `--types mobile,fixed_line`). [The complete list of phone number types](https://github.com/catamphetamine/libphonenumber-js/blob/master/source/tools/generate.js#L6-L18).\r\n\r\nThen use the generated `metadata.min.json` with the exported \"custom\" functions.\r\n\r\nFor a \"tree-shaking\" ES6-capable bundler (e.g. Webpack 2) that would be\r\n\r\n```js\r\nimport {\r\n  parseCustom,\r\n  formatCustom,\r\n  isValidNumberCustom,\r\n  AsYouTypeCustom,\r\n  getNumberTypeCustom\r\n} from 'libphonenumber-js'\r\n\r\nimport metadata from './metadata.min.json'\r\n\r\nexport const parse = (...args) => parseCustom(...args, metadata)\r\nexport const format = (...args) => formatCustom(...args, metadata)\r\nexport const isValidNumber = (...args) => isValidNumberCustom(...args, metadata)\r\nexport const getNumberType = (...args) => getNumberTypeCustom(...args, metadata)\r\n\r\nexport class AsYouType extends AsYouTypeCustom {\r\n  constructor(country) {\r\n    super(country, metadata)\r\n  }\r\n}\r\n```\r\n\r\nAnd for [Common.js](https://auth0.com/blog/javascript-module-systems-showdown/) environment that would be\r\n\r\n```js\r\nvar custom = require('libphonenumber-js/custom')\r\nvar metadata = require('./metadata.min.json')\r\n\r\nexports.parse = function parse() {\r\n  var parameters = Array.prototype.slice.call(arguments)\r\n  parameters.push(metadata)\r\n  return custom.parse.apply(this, parameters)\r\n}\r\n\r\nexports.format = function format() {\r\n  var parameters = Array.prototype.slice.call(arguments)\r\n  parameters.push(metadata)\r\n  return custom.format.apply(this, parameters)\r\n}\r\n\r\nexports.isValidNumber = function isValidNumber() {\r\n  var parameters = Array.prototype.slice.call(arguments)\r\n  parameters.push(metadata)\r\n  return custom.isValidNumber.apply(this, parameters)\r\n}\r\n\r\nexports.getNumberType = function isValidNumber() {\r\n  var parameters = Array.prototype.slice.call(arguments)\r\n  parameters.push(metadata)\r\n  return custom.getNumberType.apply(this, parameters)\r\n}\r\n\r\nexports.AsYouType = function AsYouType(country) {\r\n  custom.AsYouType.call(this, country, metadata)\r\n}\r\n\r\nexports.AsYouType.prototype = Object.create(custom.AsYouType.prototype, {})\r\nexports.AsYouType.prototype.constructor = exports.AsYouType\r\n```\r\n\r\nES6 \"tree-shaking\" is a non-trivial thing and at the moment of writing it's not guaranteed that a given ES6-aware bundler will actually be intelligent enough to tree-shake unused code, so there's always another option for those cases (if they arise): using `libphonenumber-js/custom` [Common.js](https://auth0.com/blog/javascript-module-systems-showdown/) export.\r\n\r\n```js\r\nimport { parse as parseCustom } from 'libphonenumber-js/custom'\r\nimport metadata from './metadata.min.json'\r\n\r\nexport const parse = (...args) => parseCustom(...args, metadata)\r\n```\r\n\r\n<!-- ## To do -->\r\n\r\n<!--\r\n## Automatic metadata update setup\r\n\r\nCreate a daily (24 * 60 * 60) `launchd` job\r\n\r\nhttp://alvinalexander.com/mac-os-x/mac-osx-startup-crontab-launchd-jobs\r\n\r\n```sh\r\nmkdir /Users/kuchumovn/work/libphonenumber-js-autoupdate\r\n\r\ngit clone https://github.com/catamphetamine/libphonenumber-js.git /Users/kuchumovn/work/libphonenumber-js-autoupdate\r\n\r\ncd /Users/kuchumovn/work/libphonenumber-js-autoupdate\r\n\r\nnpm install\r\n\r\nchmod u+x /Users/kuchumovn/work/libphonenumber-js-autoupdate/autoupdate.sh\r\n\r\nnano ~/Library/LaunchAgents/com.github.catamphetamine.libphonenumber-js.metadata-update.plist\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n  <dict>\r\n    <key>Label</key>\r\n    <string>com.github.catamphetamine.libphonenumber-js.metadata-update</string>\r\n\r\n    <key>ProgramArguments</key>\r\n    <array>\r\n      <string>/Users/kuchumovn/work/libphonenumber-js-autoupdate/autoupdate.sh</string>\r\n    </array>\r\n\r\n    <key>Nice</key>\r\n    <integer>1</integer>\r\n\r\n    <key>StartInterval</key>\r\n    <integer>86400</integer>\r\n\r\n    <key>RunAtLoad</key>\r\n    <true/>\r\n\r\n    <key>StandardErrorPath</key>\r\n    <string>/tmp/libphonenumber.errors.txt</string>\r\n\r\n    <key>StandardOutPath</key>\r\n    <string>/tmp/libphonenumber.output.txt</string>\r\n  </dict>\r\n</plist>\r\n\r\nlaunchctl load ~/Library/LaunchAgents/com.github.catamphetamine.libphonenumber-js.metadata-update.plist\r\n\r\nlaunchctl list | grep 'libphonenumber-js'\r\n```\r\n-->\r\n\r\n## Contributing\r\n\r\nAfter cloning this repo, ensure dependencies are installed by running:\r\n\r\n```sh\r\nnpm install\r\n```\r\n\r\nThis module is written in ES6 and uses [Babel](http://babeljs.io/) for ES5\r\ntranspilation. Widely consumable JavaScript can be produced by running:\r\n\r\n```sh\r\nnpm run build\r\n```\r\n\r\nOnce `npm run build` has run, you may `import` or `require()` directly from\r\nnode.\r\n\r\nAfter developing, the full test suite can be evaluated by running:\r\n\r\n```sh\r\nnpm test\r\n```\r\n\r\nWhen you're ready to test your new functionality on a real project, you can run\r\n\r\n```sh\r\nnpm pack\r\n```\r\n\r\nIt will `build`, `test` and then create a `.tgz` archive which you can then install in your project folder\r\n\r\n```sh\r\nnpm install [module name with version].tar.gz\r\n```\r\n\r\n## Advertisement\r\n\r\nIf you're looking for an international \"2 days ago\" javascript solution then check out [`javascript-time-ago`](https://github.com/catamphetamine/javascript-time-ago).\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/catamphetamine/libphonenumber-js.git"
  },
  "scripts": {
    "browser-build": "better-npm-run browser-build",
    "browser-build-dev": "npm run build-es6-modules && WEBPACK_ENV=dev webpack --progress --colors --watch",
    "build": "npm-run-all clean-for-build build-commonjs-modules build-es6-modules",
    "build-commonjs-modules": "better-npm-run build-commonjs-modules",
    "build-es6-modules": "better-npm-run build-es6-modules",
    "clean-for-build": "rimraf ./build/**/* ./es6/**/*",
    "metadata:branch": "babel-node runnable/metadata-branch",
    "metadata:download": "babel-node runnable/download https://raw.githubusercontent.com/googlei18n/libphonenumber/master/resources/PhoneNumberMetadata.xml PhoneNumberMetadata.xml",
    "metadata:generate": "npm-run-all metadata:generate:min metadata:generate:full metadata:generate:mobile",
    "metadata:generate:full": "babel-node -- runnable/generate ../PhoneNumberMetadata.xml ../metadata.full.json --extended",
    "metadata:generate:min": "babel-node -- runnable/generate ../PhoneNumberMetadata.xml ../metadata.min.json --examples mobile",
    "metadata:generate:mobile": "babel-node -- runnable/generate ../PhoneNumberMetadata.xml ../metadata.mobile.json --types mobile --debug",
    "metadata:publish": "npm version patch && npm publish && git push",
    "metadata:pull-request": "babel-node runnable/metadata-pull-request",
    "metadata:unbranch": "babel-node runnable/metadata-unbranch",
    "metadata:update:branch": "npm run metadata:branch && npm run metadata:download && babel-node runnable/metadata-update-and-push",
    "metadata:update:job": "git reset --hard && git pull && npm run metadata:update:release",
    "metadata:update:pull-request": "npm run metadata:branch && npm run metadata:download && babel-node runnable/metadata-update-and-push-and-pull-request",
    "metadata:update:release": "npm run metadata:download && babel-node runnable/metadata-update-and-release",
    "prepublish": "crlf --set=LF bin/* && npm-run-all build test browser-build",
    "test": "mocha --compilers js:babel-core/register --colors --bail --reporter spec \"./{,!(node_modules|commonjs|modules|build|es6)/**/}*.test.js\" --recursive",
    "test-coverage": "istanbul cover -x \"build/**\" -x \"es6/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha -- --compilers js:babel-core/register --colors --reporter dot \"./{,!(node_modules|commonjs|modules|build|es6)/**/}*.test.js\" --recursive",
    "test-travis": "istanbul cover -x \"build/**\" -x \"es6/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha --report lcovonly -- --compilers js:babel-core/register --colors --reporter spec \"./{,!(node_modules|commonjs|module|build|es6s)/**/}*.test.js\" --recursive"
  },
  "version": "0.4.52"
}
