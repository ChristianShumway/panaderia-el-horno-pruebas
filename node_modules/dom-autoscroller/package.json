{
  "_args": [
    [
      {
        "raw": "dom-autoscroller@^2.3.4",
        "scope": null,
        "escapedName": "dom-autoscroller",
        "name": "dom-autoscroller",
        "rawSpec": "^2.3.4",
        "spec": ">=2.3.4 <3.0.0",
        "type": "range"
      },
      "D:\\erget\\node_modules\\angular-draggable-droppable"
    ]
  ],
  "_from": "dom-autoscroller@>=2.3.4 <3.0.0",
  "_id": "dom-autoscroller@2.3.4",
  "_inCache": true,
  "_location": "/dom-autoscroller",
  "_nodeVersion": "9.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dom-autoscroller-2.3.4.tgz_1516232899945_0.3472055126912892"
  },
  "_npmUser": {
    "name": "hollowdoor",
    "email": "hollowdoor99@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dom-autoscroller@^2.3.4",
    "scope": null,
    "escapedName": "dom-autoscroller",
    "name": "dom-autoscroller",
    "rawSpec": "^2.3.4",
    "spec": ">=2.3.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular-draggable-droppable"
  ],
  "_resolved": "http://registry.npmjs.org/dom-autoscroller/-/dom-autoscroller-2.3.4.tgz",
  "_shasum": "1ed25cbde2bdf3bf3eb762937089b20ecef190bd",
  "_shrinkwrap": null,
  "_spec": "dom-autoscroller@^2.3.4",
  "_where": "D:\\erget\\node_modules\\angular-draggable-droppable",
  "author": {
    "name": "Quentin Engles",
    "email": "hollowdoor99@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/hollowdoor/dom_autoscroller/issues"
  },
  "dependencies": {
    "animation-frame-polyfill": "^1.0.0",
    "create-point-cb": "^1.0.0",
    "dom-mousemove-dispatcher": "^1.0.1",
    "dom-plane": "^1.0.1",
    "dom-set": "^1.0.1",
    "type-func": "^1.0.1"
  },
  "description": "Auto scroll dom elements",
  "devDependencies": {
    "dragula": "^3.7.2",
    "minifyify": "^7.3.3",
    "rollup": "^0.41.4",
    "rollup-plugin-buble": "^0.15.0",
    "rollup-plugin-commonjs": "^5.0.5",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-uglify": "^1.0.1",
    "uglify-js": "^2.7.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-HcAdt/2Dq9x4CG6LWXc2x9Iq0MJPAu8fuzHncclq7byufqYEYVtx9sZ/dyzR+gdj4qwEC9p27Lw1G2HRRYX6jQ==",
    "shasum": "1ed25cbde2bdf3bf3eb762937089b20ecef190bd",
    "tarball": "https://registry.npmjs.org/dom-autoscroller/-/dom-autoscroller-2.3.4.tgz"
  },
  "files": [
    "dist",
    "LICENSE",
    "index.js"
  ],
  "gitHead": "7c808b995ccfc84ef38ecf634138eaf08db7238d",
  "homepage": "https://github.com/hollowdoor/dom_autoscroller#readme",
  "jsnext:main": "dist/bundle.es.js",
  "keywords": [
    "scrolling",
    "DOM"
  ],
  "license": "MIT",
  "main": "dist/bundle.js",
  "maintainers": [
    {
      "name": "hollowdoor",
      "email": "hollowdoor99@gmail.com"
    }
  ],
  "name": "dom-autoscroller",
  "optionalDependencies": {},
  "readme": "dom-autoscroller\n================\n\n![dom autoscroller](logo.png)\n\nThe syncMove option and synchronizing move\n------------------------------------------\n\n`dom-autoscroller` has a new option named syncMove.\n\n`syncMove` takes a boolean, or a function that returns a boolean, and the returned value of `syncMove` toggles the event synching of `dom-autoscroller`.\n\nWhy do that? There are some situations where `dom-autoscroller` might be doing what it does, but even though the mouse cursor moves relative to the scroll position `mousemove` events do not get fired. When you set `syncMove` to true that allows `mousemove` events with fresh coordinates to be fired for some other source that might need those events.\n\nFor now the option `syncMove` is set to false. This is for experimental purposes, and because this functionality is likely to be buggy. `touchmove` syncing is also planned, but it's best if the integration of move syncing be taken slow. Please leave plenty of issues to help integrate `syncMove`, and `mousemove` dispatch into `dom-autoscroller`.\n\nOnce movement sync is fully integrated into `dom-autoscroller` the `syncMove` option might be set to default true, or removed entirely. It depends on how things work out down the line.\n\nBig Announcement!\n-----------------\n\nVersion 2 of dom-autoscroller is out. You can upgrade to version 2.\n\nHere are the differences.\n\n-\t**pixels option removed.**\n-\tmaxSpeed option added.\n-\tSlightly different algorithm for scrolling\n-\tScrolling speed changes dynamically based on distance from element edge\n-\tCompatibility with [rollup](https://github.com/rollup/rollup).\n\nScrolling in dom-autoscroller is now much smoother. So you should upgrade to version 2.\n\nInstall\n-------\n\n**NPM**\n\n`npm install --save dom-autoscroller`\n\n**BOWER**\n\n`bower install --save dom-autoscroller`\n\nThen use browserify, webpack, or [rollup](https://github.com/rollup/rollup) to build your script.\n\nOr Download one of these files from the Github repo:\n\n-\t*dist/dom-autoscroller.js*\n-\t*dist/dom-autoscroller.min.js*\n\nIf you use one of these prepackaged files the global name is **autoScroll**.\n\nDemo\n---\n\n[jsfiddle Demo of dom-autoscroller](http://jsfiddle.net/gh/get/library/pure/hollowdoor/dom_autoscroller_demo/tree/master/Demo)\n\n\nUsage\n-----\n\nThis example uses [link-css](https://www.npmjs.com/package/link-css), and [dragula](https://www.npmjs.com/package/dragula).\n\n```javascript\nrequire('link-css')('../node_modules/dragula/dist/dragula.min.css');\nvar dragula = require('dragula'),\n    autoScroll = require('dom-autoscroller');\n\n\nvar drake = dragula([document.querySelector('#list'), document.querySelector('#hlist')]);\nvar scroll = autoScroll([\n        document.querySelector('#list-container'),\n        document.querySelector('#container2')\n    ],{\n    margin: 20,\n    maxSpeed: 5,\n    scrollWhenOutside: true,\n    autoScroll: function(){\n        //Only scroll when the pointer is down, and there is a child being dragged.\n        return this.down && drake.dragging;\n    }\n});\n```\n\nKeep In Mind\n------------\n\n`dom-autoscroller` exploits the simplicity of the single parent, to child relationship. A scrolling element with more than one children will likely not work well with `dom-autoscroller`.\n\nFor clarity here is a more complete example:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Drag test</title>\n    <style>\n    #list-container{\n        /*The height produces the scroll bar.*/\n        height: 100px;\n        /*Make this scrollable.*/\n        overflow-y: auto;\n    }\n    </style>\n</head>\n<body>\n    <div id=\"list-container\">\n        <ol id=\"list\" type=\"1\">\n            <li>zero</li>\n            <li>one</li>\n            <li>two</li>\n            <li>three</li>\n            <li>four</li>\n            <li>five</li>\n            <li>six</li>\n            <li>seven</li>\n            <li>eight</li>\n            <li>nine</li>\n            <li>ten</li>\n            <li>eleven</li>\n            <li>twelve</li>\n            <li>thirteen</li>\n            <li>fourteen</li>\n            <li>fifteen</li>\n        </ol>\n    </div>\n    <div id=\"container2\">\n        <ol id=\"hlist\">\n            <li>zero</li>\n            <li>one</li>\n            <li>two</li>\n            <li>three</li>\n            <li>four</li>\n            <li>five</li>\n            <li>six</li>\n            <li>seven</li>\n            <li>eight</li>\n            <li>nine</li>\n            <li>ten</li>\n            <li>11</li>\n            <li>12</li>\n            <li>13</li>\n            <li>14</li>\n            <li>15</li>\n        </ol>\n    </div>\n    <script>\n    //Load dragula's css.\n    require('link-css')('../node_modules/dragula/dist/dragula.min.css');\n    var dragula = require('dragula'),\n        papyri = require('dom-autoscroller');\n\n\n    var drake = dragula([document.querySelector('#list'), document.querySelector('#hlist')]);\n    var scroll = autoScroll([\n            document.querySelector('#list-container'),\n            document.querySelector('#container2')\n        ],{\n        margin: 20,\n        pixels: 5,\n        scrollWhenOutside: false,\n        autoScroll: function(){\n            return this.down && drake.dragging;\n        }\n    });\n    </script>\n</body>\n</html>\n```\n\nIf you look at the last example notice the containers have only one child, and that they're different from the containers used by *dragula*. In theory multiple children could work with `dom-autoscroller`, but the children scrolling might interfere with the workings of the library *dragula*.\n\n\nAuto Scroller API\n-----------------\n\n### autoScroll(element|elements, options) -> instance\n\nCreate an auto scroller on an **element**, or and **array of elements**.\n\n**The element should have only one child element to work consistently.**\n\n#### options.margin = Integer\n\nAn inner area to detect when the pointer is close to the edge.\n\n#### options.autoScroll = Function\n\nA callback function used to determine if the element should scroll, or when the element should scroll.\n\nReturn a boolean value from this function to allow scrolling.\n\n#### options.maxSpeed = Integer\n\n`maxSpeed` defaults to 4.\n\nSpeed effects in dom-autoscroller:\n\n1.\tSpeed adjusts dynamically depending on how close to the edge your pointer is.\n2.\tSpeed is pixels per frame.\n\n`maxSpeed` limits pixels per frame.\n\n#### options.pixels = Integer\n\n**removed in version 2**\n\nSet how many pixels per second you want to scroll during the auto scrolling action. More is smoother.\n\nSpeed was **pixels/second** in version 1, and in version 2 speed is **pixels/frame**.\n\n#### options.scrollWhenOutside = Boolean\n\nWhther or not it should continue to scroll when the pointer is outside the container. Defaults to **false**.\n\nAuto Scroller Properties\n------------------------\n\n### down = Boolean\n\nIs the pointer down?\n\n### scrolling = Boolean\n\nIs one of the elements scrolling?\n\n### point = Object\n\n**This reference no longer exists.**\n\nA reference to the [pointer](https://github.com/hollowdoor/pointer_point) object.\n\nAuto Scroller Methods\n---------------------\n\n### autoScroll\n\nThe function you set in the constructor options for `options.autoScroll`.\n\n### destroy(forceCleanAnimation)\n\nRemove all event listeners needed to be able to track the pointer. If destroy Auto Scroller meanwhile scrolling then just call `.destroy(true)` to force to stop scrolling animation. Call `.destroy()` and `.destroy(false)` is the same behaviours.\n\nUndocumented methods\n--------------------\n\nThere are undocumented methods in version 2.\n\nThese are:\n\n1.\tadd()\n2.\tremove()\n\nThese methods add, or remove elements from dom-autoscroller.\n\nWhy are these considered undocumented even though there here in the document? :)\n\n`add`, and `remove` are incomplete, and there is no detailed explanation. Use these methods at your own risk.\n\nAbout\n-----\n\nThere are tons of reasons to have auto scrolling. The main one being sometimes a finger can't reach the mouse wheel comfortably. `dom-autoscroller` is a comfort module.\n\nThis is also a nice small module to do this kind of thing when auto scrolling is all you need.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hollowdoor/dom_autoscroller.git"
  },
  "scripts": {
    "build": "node ./rollit",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.3.4"
}
