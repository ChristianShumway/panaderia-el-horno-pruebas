{
  "_args": [
    [
      {
        "raw": "ngx-mask",
        "scope": null,
        "escapedName": "ngx-mask",
        "name": "ngx-mask",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\michelle.torres\\Desktop\\proyectos\\panaderia-el-horno"
    ]
  ],
  "_from": "ngx-mask",
  "_hasShrinkwrap": false,
  "_id": "ngx-mask@10.0.4",
  "_location": "/ngx-mask",
  "_nodeVersion": "12.18.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ngx-mask_10.0.4_1601368388204_0.7587239896719968"
  },
  "_npmUser": {
    "name": "igornepipenko",
    "email": "igornepipenko@gmail.com"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ngx-mask",
    "scope": null,
    "escapedName": "ngx-mask",
    "name": "ngx-mask",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-mask/-/ngx-mask-10.0.4.tgz",
  "_shasum": "47592d52eefaa874582015eaf1bb6615ce09ce4f",
  "_shrinkwrap": null,
  "_spec": "ngx-mask",
  "_where": "C:\\Users\\michelle.torres\\Desktop\\proyectos\\panaderia-el-horno",
  "author": {
    "name": "ngx-mask"
  },
  "bugs": {
    "url": "https://github.com/JsDaddy/ngx-mask/issues"
  },
  "contributors": [
    {
      "name": "ngx-mask"
    }
  ],
  "dependencies": {
    "tslib": "^2.0.0"
  },
  "description": "awesome ngx mask",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-CooFh9lhbDdsYBOdMNhg3yiWxiW9FbXysXeU/uJSgbVUwKv8VrUuvif5umzc4DrHco2l/rMfheOv0rxSe1IxFQ==",
    "shasum": "47592d52eefaa874582015eaf1bb6615ce09ce4f",
    "tarball": "https://registry.npmjs.org/ngx-mask/-/ngx-mask-10.0.4.tgz",
    "fileCount": 28,
    "unpackedSize": 777802,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfcvFECRA9TVsSAnZWagAAzPUP/jkIctW+XW1wCac7Xv0z\nRABxpYFhw9pdVf+BvISddM4MBOoqAZnFgSNvoU8GerXrhV6j+9/FhmmYtHsW\nhCMlcvufQnsYzpDTBo48uPByVKXrFjab0hKxA3TVHQGgjLfPhzK2X3Cj9h5r\nP/NntIEi1l/mpyXZn06EORSXvt3iah3kbCGT7vcDRHZ3keQcNeJwVcd+oHZB\nfJuCLm6hE+q65iWxjW3pTBGrwIwwAlLSDDZ7MfLRFrEdwF/igaND1i4W9USe\nBMDKQVpYu39GVLThunLnIPw/MSgy25CY2Jw31Oy3S0+kCaz5G2MFGDIaS1R8\na9ysc1z9BqX4shfDtPPdKKAl+MHPRR2dcHqU2nwB7/q0KSFe+ue2C8cX549q\nCmLHHJHefxzvnkhj95UF0aSQphCPQuceQx41B0ydBGsabssCPYrFiBSZJaLi\nGceWawP2koLZrxjoMs0rJMoZdbTNMrMy8XkIhvNI9BxI1zSDKLQ9U3Ky59fB\nQidD0DJFBhMGKpoZ7TvW1Lath/UDQu3kWJAdCW47M+Y1xOnRZDhYIXkNHwc2\n5YhpxumiUUuJ+wSfCCp6CwQQweDC+z8t75Gch9hpvJeENAYHs2rfGQfFg3FB\ntuuiYaYQGEw1ZNTnwuvlJ6zzpTs5URJ4dUl5ig16nASdojhbxZyicZzazPOa\nAuUQ\r\n=m7/r\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "es2015": "fesm2015/ngx-mask.js",
  "esm2015": "esm2015/ngx-mask.js",
  "fesm2015": "fesm2015/ngx-mask.js",
  "homepage": "https://github.com/JsDaddy/ngx-mask",
  "keywords": [
    "ng2-mask",
    "ngx-mask",
    "ng2",
    "angular-mask",
    "mask",
    "angular",
    "angular2",
    "angular2-mask",
    "ng2mask",
    "jsdaddy"
  ],
  "license": "MIT",
  "main": "bundles/ngx-mask.umd.js",
  "maintainers": [
    {
      "name": "igornepipenko",
      "email": "igornepipenko@gmail.com"
    }
  ],
  "metadata": "ngx-mask.metadata.json",
  "module": "fesm2015/ngx-mask.js",
  "name": "ngx-mask",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">=10.0.0",
    "@angular/core": ">=10.0.0",
    "@angular/forms": ">=10.0.0"
  },
  "readme": "<a href=\"https://jsdaddy.github.io/ngx-mask\">\n  <h1 align=\"center\">ngx-mask</h1>\n</a>\n\n[![Build Status](https://img.shields.io/travis/JsDaddy/ngx-mask.svg?branch=develop)](https://travis-ci.org/JsDaddy/ngx-mask)\n[![npm](https://img.shields.io/npm/v/ngx-mask.svg)](https://www.npmjs.com/package/ngx-mask)\n<a href=\"https://npmjs.org/ngx-mask\">\n<img src=\"https://img.shields.io/npm/dt/ngx-mask.svg\" alt=\"npm downloads\">\n</a>\n\n[![npm](https://img.shields.io/npm/dm/ngx-mask.svg)](https://www.npmjs.com/package/ngx-mask)\n\n[![GitHub contributors](https://img.shields.io/github/contributors/JSDaddy/ngx-mask.svg?style=flat-square)](https://github.com/JSDaddy/ngx-mask)\n\n[![GitHub stars](https://img.shields.io/github/stars/JSDaddy/ngx-mask.svg?label=GitHub%20Stars&style=flat-square)](https://github.com/JSDaddy/ngx-mask)\n\nYou can also try our [NGX LOADER INDICATOR](https://www.npmjs.com/package/ngx-loader-indicator).\nYou can also try our [NGX COPYPASTE](https://www.npmjs.com/package/ngx-copypaste).\n\n### You can see the full [documentation](https://jsdaddy.github.io/ngx-mask-page/) with examples\n\n## Installing\n\n```bash\n$ npm install --save ngx-mask\n```\n\n## Quickstart\n\nImport **ngx-mask** module in Angular app.\n\n### With default mask config options\n\n```typescript\nimport { NgxMaskModule, IConfig } from 'ngx-mask'\n\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = null;\n\n@NgModule({\n  imports: [\n    NgxMaskModule.forRoot(),\n  ],\n})\n```\n\n### Passing in your own mask config options\n\n```typescript\nimport { NgxMaskModule, IConfig } from 'ngx-mask'\n\nconst maskConfig: Partial<IConfig> = {\n  validation: false,\n};\n\n@NgModule({\n  imports: [\n    NgxMaskModule.forRoot(maskConfig),\n  ],\n})\n```\n\nOr using a function to get the config:\n\n```typescript\nconst maskConfigFunction: () => Partial<IConfig> = () => {\n  return {\n    validation: false,\n  };\n};\n\n@NgModule({\n  imports: [\n    NgxMaskModule.forRoot(maskConfigFunction),\n  ],\n})\n```\n\nThen, just define masks in inputs.\n\n### Usage\n\n```html\n<input type=\"text\" mask=\"<here goes your mask>\" />\n```\n\nor\n\n```html\n<input type=\"text\" [mask]=\"<here goes a reference to your component's mask property>\" />\n```\n\nAlso, you can use mask pipe.\n\n### Usage\n\n```html\n<span>{{phone | mask: '(000) 000-0000'}}</span>\n```\n\nFor separator you can add thousandSeparator\n\n### Usage\n\n```html\n<span>{{value | mask: 'separator':','}}</span>\n```\n\n#### Examples\n\n| mask           | example        |\n| -------------- | -------------- |\n| 9999-99-99     | 2017-04-15     |\n| 0\\*.00         | 2017.22        |\n| 000.000.000-99 | 048.457.987-98 |\n| AAAA           | 0F6g           |\n| SSSS           | asDF           |\n\n## Mask Options\n\nYou can define your custom options for all directives (as object in the mask module) or for each (as attributes for directive). If you override this parameter, you have to provide all the special characters (default one are not included).\n\n### specialCharacters (string[ ])\n\nWe have next default characters:\n\n| character |\n| --------- |\n| -         |\n| /         |\n| (         |\n| )         |\n| .         |\n| :         |\n| **space** |\n| +         |\n| ,         |\n| @         |\n| [         |\n| ]         |\n| \"         |\n| '         |\n\n#### Usage\n\n```html\n<input type=\"text\" [specialCharacters]=\"[ '[' ,']' , '\\\\' ]\" mask=\"[00]\\[000]\" />\n```\n\n##### Then\n\n```text\nInput value: 789-874.98\nMasked value: [78]\\[987]\n```\n\n```typescript\npatterns ({ [character: string]: { pattern: RegExp, optional?: boolean})\n```\n\nWe have next default patterns:\n\n| code  | meaning                                     |\n| ----- | ------------------------------------------- |\n| **0** | digits (like 0 to 9 numbers)                |\n| **9** | digits (like 0 to 9 numbers), but optional  |\n| **A** | letters (uppercase or lowercase) and digits |\n| **S** | only letters (uppercase or lowercase)       |\n\n##### Usage\n\n```html\n<input type=\"text\" [patterns]=\"customPatterns\" mask=\"(000-000)\" />\n```\n\nand in your component\n\n```typescript\npublic customPatterns = { '0': { pattern: new RegExp('\\[a-zA-Z\\]')} };\n```\n\n##### Then\n\n```text\nInput value: 789HelloWorld\nMasked value: (Hel-loW)\n```\n\n### Custom pattern for this\n\nYou can define custom pattern and specify symbol to be rendered in input field.\n\n```typescript\npattern = {\n  B: {\n    pattern: new RegExp('\\\\d'),\n    symbol: 'X',\n  },\n};\n```\n\n### prefix (string)\n\nYou can add prefix to you masked value\n\n#### Usage\n\n```html\n<input type=\"text\" prefix=\"+7\" mask=\"(000) 000 00 00\" />\n```\n\n### suffix (string)\n\nYou can add suffix to you masked value\n\n#### Usage\n\n```html\n<input type=\"text\" suffix=\"$\" mask=\"0000\" />\n```\n\n### dropSpecialCharacters (boolean | string[])\n\nYou can choose if mask will drop special character in the model, or not, default value is `true`.\n\n#### Usage\n\n```html\n<input type=\"text\" [dropSpecialCharacters]=\"false\" mask=\"000-000.00\" />\n```\n\n##### Then\n\n```text\nInput value: 789-874.98\nModel value: 789-874.98\n```\n\n### showMaskTyped (boolean)\n\nYou can choose if mask is shown while typing, or not, default value is `false`.\n\n#### Usage\n\n```html\n<input mask=\"(000) 000-0000\" prefix=\"+7\" [showMaskTyped]=\"true\" />\n```\n\n### allowNegativeNumbers (boolean)\n\nYou can choose if mask will allow the use of negative numbers. The default value is `false`.\n\n#### Usage\n\n```html\n<input type=\"text\" [allowNegativeNumbers]=\"true\" mask=\"separator.2\" />\n```\n\n##### Then\n\n```text\nInput value: -10,000.45\nModel value: -10000.45\n```\n\n### placeHolderCharacter (string)\n\nIf the `showMaskTyped` parameter is enabled, this setting customizes the character used as placeholder. Default value is `_`.\n\n#### Usage\n\n```html\n<input mask=\"(000) 000-0000\" prefix=\"+7\" [showMaskTyped]=\"true\" placeHolderCharacter=\"*\" />\n```\n\n### clearIfNotMatch (boolean)\n\nYou can choose clear the input if the input value **not match** the mask, default value is `false`.\n\n### Pipe with mask expression and custom Pattern ([string, pattern])\n\nYou can pass array of expression and custom Pattern to pipe.\n\n#### Usage\n\n```html\n<span>{{phone | mask: customMask}}</span>\n```\n\nand in your component\n\n```typescript\ncustomMask: [string, pattern];\n\npattern = {\n  P: {\n    pattern: new RegExp('\\\\d'),\n  },\n};\n\nthis.customMask = ['PPP-PPP', this.pattern];\n```\n\n### Repeat mask\n\nYou can pass into mask pattern with brackets.\n\n#### Usage\n\n```html\n<input type=\"text\" mask=\"A{4}\" />\n```\n\n### Thousand separator\n\nYou can divide your input by thousands, by default will seperate with a space.\n\n#### Usage\n\n```html\n<input type=\"text\" mask=\"separator\" />\n```\n\nFor separate input with dots.\n\n```html\n<input type=\"text\" mask=\"separator\" thousandSeparator=\".\" />\n```\n\nFor using decimals enter `.` and how many decimals to the end of your input to `separator` mask.\n\n```html\n<input type=\"text\" mask=\"separator.2\" />\n```\n\n```text\nInput value: 1234.56\nMasked value: 1 234.56\n\nInput value: 1234,56\nMasked value: 1.234,56\n\nInput value: 1234.56\nMasked value: 1,234.56\n```\n\n```html\n<input type=\"text\" mask=\"separator.2\" thousandSeparator=\".\" />\n<input type=\"text\" mask=\"separator.2\" thousandSeparator=\",\" />\n<input type=\"text\" mask=\"separator.0\" thousandSeparator=\".\" />\n<input type=\"text\" mask=\"separator.0\" thousandSeparator=\",\" />\n```\n\nFor limiting decimal precision add `.` and the precision you want to limit too on the input. **2** is useful for currency. **0** will prevent decimals completely.\n\n```text\nInput value: 1234,56\nMasked value: 1.234,56\n\nInput value: 1234.56\nMasked value: 1,234.56\n\nInput value: 1234,56\nMasked value: 1.234\n\nInput value: 1234.56\nMasked value: 1,234\n```\n\n```html\n<input type=\"text\" mask=\"separator.2\" separatorLimit=\"1000\" />\n```\n\nFor limiting the number of digits before the decimal point you can set `separatorLimit` value to _10_, _100_, _1000_ etc.\n\n```text\nInput value: 12345678,56\nMasked value: 1.234,56\n```\n\n### Time validation\n\nYou can validate your input as 24 hour format.\n\n#### Usage\n\n```html\n<input type=\"text\" mask=\"Hh:m0:s0\" />\n```\n\n### Percent validation\n\nYou can validate your input for percents.\n\n#### Usage\n\n```html\n<input type=\"text\" mask=\"percent\" suffix=\"%\" />\n```\n\n### FormControl validation\n\nYou can validate your `formControl`, default value is `true`.\n\n#### Usage\n\n```html\n<input type=\"text\" mask=\"00 00\" [validation]=\"true\" />\n```\n\n### Secure input\n\nYou can hide symbols in input field and get the actual value in `formcontrol`.\n\n#### Usage\n\n```html\n<input placeholder=\"Secure input\" [hiddenInput]=\"true\" mask=\"XXX/X0/0000\" />\n```\n\n### IP valid mask\n\n#### Usage\n\n```html\n<input mask=\"IP\" />\n```\n\n### CPF_CNPJ valid mask\n\n#### Usage\n\n```html\n<input mask=\"CPF_CNPJ\" />\n```\n\n### Dynamic valid mask\n\n#### Usage\n\nYou can pass into mask pattern with `||`.\n\n```html\n<input mask=\"000.000.000-00||00.000.000/0000-00\" />\n```\n\n```html\n<input mask=\"(00) 0000-0000||(00) 0 0000-0000\" />\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/JsDaddy/ngx-mask.git"
  },
  "sideEffects": false,
  "typings": "ngx-mask.d.ts",
  "version": "10.0.4"
}
